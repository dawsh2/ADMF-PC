# Root Container Backtest Pattern
# Creates an explicit root container that owns all child containers

name: root_backtest
description: Backtest with explicit root container and proper hierarchy

# Containers to create
containers:
  # Explicit root container
  - name: root
    type: root
    config:
      # Root container manages the root event bus
      components: []  # No components needed at root level
      
    # Child containers defined inline to establish hierarchy
    containers:
      # Data containers
      - name_template: "{symbol}_{timeframe}_data"
        type: data
        foreach:
          symbol:
            from_config: data.symbols
            default: []
          timeframe:
            from_config: data.timeframes
            default: ['1d']
        config:
          symbol: "{symbol}"
          timeframe: "{timeframe}"
          components: ['data_streamer']
          data_dir: './data'  # Path to CSV files
          max_bars:
            from_config: data.max_bars
            default: null
          
      # Feature container
      - name: features
        type: features
        config:
          components: ['feature_pipeline']
          
      # Portfolio containers
      - name: portfolio_default
        type: portfolio
        config:
          components: ['portfolio_manager']
          initial_capital:
            from_config: portfolio.initial_capital
            default: 100000
            
      # Execution container
      - name: execution
        type: execution
        config:
          components: ['execution_engine']
          mode:
            from_config: execution.mode
            default: backtest

# Since all containers are children of root, they share root's event bus
# No explicit routes needed - parent-child communication handles it