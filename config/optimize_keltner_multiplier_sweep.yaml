name: optimize_keltner_multiplier_sweep
mode: signal_generation
symbols: ["SPY"]
start_date: "2024-01-01"
end_date: "2024-06-30"
dataset: train
split_ratio: 0.8

# Fine-grained sweep of multipliers to find trade frequency vs edge trade-off
parameter_space:
  strategies:
    # Dense sampling of multipliers around winning value (1.0)
    - type: keltner_bands
      param_overrides:
        period: [50]  # Keep best period fixed
        multiplier: [
          0.50, 0.55, 0.60, 0.65, 0.70, 0.75, 0.80, 0.85, 0.90, 0.95,
          1.00, 1.05, 1.10, 1.15, 1.20, 1.25, 1.30, 1.35, 1.40, 1.45,
          1.50, 1.55, 1.60, 1.65, 1.70, 1.75, 1.80, 1.85, 1.90, 1.95,
          2.00, 2.10, 2.20, 2.30, 2.40, 2.50, 2.60, 2.70, 2.80, 2.90,
          3.00
        ]
    
    # Also test with slightly different periods
    - type: keltner_bands
      param_overrides:
        period: [45]
        multiplier: [
          0.70, 0.80, 0.90, 1.00, 1.10, 1.20, 1.30, 1.40, 1.50, 1.60,
          1.70, 1.80, 1.90, 2.00, 2.20, 2.40, 2.60, 2.80, 3.00
        ]
    
    - type: keltner_bands
      param_overrides:
        period: [40]
        multiplier: [
          0.70, 0.80, 0.90, 1.00, 1.10, 1.20, 1.30, 1.40, 1.50, 1.60,
          1.70, 1.80, 1.90, 2.00, 2.20, 2.40, 2.60, 2.80, 3.00
        ]

data:
  type: file
  config:
    file_pattern: "./data/{symbol}.csv"
    
timeframe: "1m"

signal_persistence: 
  enabled: true
  compression: sparse

# This will generate ~79 strategies to help us understand:
# - How edge degrades as we increase multiplier (more trades)
# - Where the optimal trade-off point is
# - Whether slightly different periods have different optimal multipliers