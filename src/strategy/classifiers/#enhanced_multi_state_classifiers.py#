gcy distributing, high volatility at tops
    - markdown: Downtrend phase, decreasing price
    - uncertainty: Transition phase, unclear direction
    """
    # Parameters
    volume_surge_threshold = params.get('volume_surge_threshold', 1.5)
    trend_strength_threshold = params.get('trend_strength_threshold', 0.02)
    volatility_threshold = params.get('volatility_threshold', 1.5)
    
    # Get features
    volume = features.get('volume', 0)
    rsi = features.get('rsi_14') or features.get('rsi')
    sma_20 = features.get('sma_20')
    sma_50 = features.get('sma_50')
    atr = features.get('atr_14') or features.get('atr')
    price = features.get('close', 0)
    
    # Get historical volume for comparison (simplified - would need rolling average in production)
    avg_volume = features.get('volume_sma_20', volume)  # Fallback to current if no average
    
    if not all([volume > 0, rsi, sma_20, sma_50, atr, price > 0]):
        return {
            'regime': 'uncertainty',
            'confidence': 0.0,
            'metadata': {'reason': 'Missing features'}
        }
    
    # Calculate key metrics
    volume_ratio = volume / avg_volume if avg_volume > 0 else 1.0
    trend_strength = (sma_20 - sma_50) / sma_50
    price_position = (price - sma_20) / sma_20
    volatility_pct = (atr / price) * 100
    
    # Market phase detection logic
    is_high_volume = volume_ratio > volume_surge_threshold
    is_low_volatility = volatility_pct < volatility_threshold
    is_high_volatility = volatility_pct > volatility_threshold * 1.5
    
    # Accumulation: Low volatility, sideways price, possible volume spikes
    if abs(trend_strength) < trend_strength_threshold and is_low_volatility:
        if is_high_volume and rsi < 50:
            regime = 'accumulation'
            confidence = min(volume_ratio / 2 + (50 - rsi) / 100, 1.0)
            reason = f'Low volatility sideways with volume surge, RSI: {rsi:.1f}'
        elif rsi < 40:
            regime = 'accumulation'
            confidence = (40 - rsi) / 40
            reason = f'Oversold sideways market, RSI: {rsi:.1f}'
        else:
            regime = 'uncertainty'
            confidence = 0.6
            reason = 'Sideways market, unclear accumulation'
    
    # Markup: Uptrend with increasing volume
    elif trend_strength > trend_strength_threshold and price_position > 0:
        if is_high_volume or rsi > 50:
            regime = 'markup'
            confidence = min(trend_strength / (trend_strength_threshold * 2) + volume_ratio / 3, 1.0)
            reason = f'Uptrend with {volume_ratio:.1f}x volume, RSI: {rsi:.1f}'
        else:
            regime = 'markup'
            confidence = trend_strength / (trend_strength_threshold * 2)
            reason = f'Uptrend, moderate volume'
    
    # Distribution: High volatility at tops, divergences
    elif is_high_volatility and rsi > 60 and price_position > 0.01:
        if is_high_volume:
            regime = 'distribution'
            confidence = min(volatility_pct / (volatility_threshold * 2) + (rsi - 60) / 40, 1.0)
            reason = f'High volatility top with {volume_ratio:.1f}x volume, RSI: {rsi:.1f}'
        else:
            regime = 'distribution'
            confidence = (rsi - 60) / 40 * volatility_pct / (volatility_threshold * 2)
            reason = f'Potential top, RSI: {rsi:.1f}, volatility: {volatility_pct:.2f}%'
    
    # Markdown: Downtrend phase
    elif trend_strength < -trend_strength_threshold and price_position < 0:
        regime = 'markdown'
        confidence = min(abs(trend_strength) / (trend_strength_threshold * 2) + (50 - rsi) / 50, 1.0)
        reason = f'Downtrend, RSI: {rsi:.1f}, trend: {trend_strength:.3f}'
    
    # Default: Uncertainty
    else:
        regime = 'uncertainty'
        confidence = 0.5
        reason = f'Mixed signals: trend={trend_strength:.3f}, vol={volatility_pct:.2f}%, RSI={rsi:.1f}'
    
    return {
        'regime': regime,
        'confidence': confidence,
        'metadata': {
            'volume_ratio': volume_ratio,
            'trend_strength': trend_strength,
            'price_position': price_position,
            'volatility_pct': volatility_pct,
            'rsi': rsi,
            'reason': reason
        }
    }