"""
Quick fix to prevent memory accumulation in signal generation.

The issue: Both TemporalSparseStorage and EventTracer accumulate data in memory.
This monkey patch fixes the issue without modifying the core files.
"""

import logging
from typing import List, Dict, Any

logger = logging.getLogger(__name__)


def patch_temporal_sparse_storage():
    """Patch TemporalSparseStorage to not accumulate all changes in memory."""
    try:
        from src.core.events.storage.temporal_sparse_storage import TemporalSparseStorage
        
        # Save original __init__
        original_init = TemporalSparseStorage.__init__
        
        def new_init(self, base_dir: str = "./sparse_signals", run_id=None,
                     timeframe: str = "1m", source_file_path=None, 
                     data_source_type: str = "csv"):
            # Call original init
            original_init(self, base_dir, run_id, timeframe, source_file_path, data_source_type)
            
            # Override _changes to be a limited deque instead of list
            from collections import deque
            self._changes = deque(maxlen=1000)  # Keep only last 1000 changes
            logger.info(f"Patched TemporalSparseStorage to limit changes buffer to 1000")
        
        # Replace the __init__ method
        TemporalSparseStorage.__init__ = new_init
        
        logger.info("Successfully patched TemporalSparseStorage")
        
    except Exception as e:
        logger.error(f"Failed to patch TemporalSparseStorage: {e}")


def patch_event_tracing():
    """Disable or limit event tracing to prevent memory accumulation."""
    try:
        from src.core.events.bus import EventBus
        
        # Save original enable_tracing
        original_enable_tracing = EventBus.enable_tracing
        
        def new_enable_tracing(self, trace_config: Dict[str, Any]) -> None:
            # Limit max_events to something reasonable
            if 'max_events' in trace_config and trace_config['max_events'] > 1000:
                logger.info(f"Limiting max_events from {trace_config['max_events']} to 1000")
                trace_config['max_events'] = 1000
            
            # Call original method with limited config
            original_enable_tracing(self, trace_config)
        
        # Replace the method
        EventBus.enable_tracing = new_enable_tracing
        
        logger.info("Successfully patched EventBus.enable_tracing")
        
    except Exception as e:
        logger.error(f"Failed to patch EventBus: {e}")


def apply_memory_fixes():
    """Apply all memory fixes."""
    logger.info("Applying memory fixes for signal generation...")
    patch_temporal_sparse_storage()
    patch_event_tracing()
    logger.info("Memory fixes applied")


# Usage:
# Add this to your main.py before running:
# from src.strategy.fixes.memory_fix import apply_memory_fixes
# apply_memory_fixes()