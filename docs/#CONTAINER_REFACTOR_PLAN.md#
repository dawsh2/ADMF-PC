# Container Module Refactoring Plan

## Objective
Migrate container.py's comprehensive features into engine.py's clean Protocol + Composition architecture, creating the best of both implementations.

## Current State Analysis

### container.py (943 lines) - Feature Rich
**Strengths:**
- Comprehensive event tracing and metrics
- Advanced parent/child composition
- Sophisticated container naming strategy  
- Rich configuration and metadata system
- Mature error handling with custom exceptions
- Streaming metrics support

**Weaknesses:**
- Monolithic design (943 lines in one class)
- Mixed concerns (state + events + metrics + naming)
- Hard to test individual components
- Violates single responsibility principle

### engine.py (344 lines) - Clean Architecture
**Strengths:**
- Pure Protocol + Composition architecture
- Clear separation of concerns
- Single responsibility design
- Easy to test components in isolation
- Composable and extensible
- Runtime protocol verification

**Weaknesses:**
- Missing advanced features (tracing, metrics)
- Basic event handling
- No hierarchical composition
- Limited configuration management

## Migration Strategy

### Phase 1: Extract Core Components from container.py

#### 1.1 ContainerMetricsTracker
Extract metrics functionality into composable component:
```python
# File: src/core/containers/components/metrics.py
@dataclass  
class ContainerMetricsTracker(ContainerComponent):
    def initialize(self, container) -> None: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def get_state(self) -> Dict[str, Any]: ...
    def cleanup(self) -> None: ...
    
    # Metrics methods from container.py
    def track_event_processed(self) -> None: ...
    def track_event_published(self) -> None: ...
    def get_streaming_metrics(self) -> Dict[str, Any]: ...
```

#### 1.2 ContainerEventTracer  
Extract event tracing functionality:
```python
# File: src/core/containers/components/tracing.py
@dataclass
class ContainerEventTracer(ContainerComponent):
    def initialize(self, container) -> None: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def get_state(self) -> Dict[str, Any]: ...
    def cleanup(self) -> None: ...
    
    # Tracing methods from container.py
    def trace_event(self, event: Event) -> None: ...
    def get_trace_summary(self) -> Dict[str, Any]: ...
    def flush_traces(self) -> None: ...
```

#### 1.3 ContainerComposer
Extract parent/child composition functionality:
```python
# File: src/core/containers/components/composition.py
@dataclass
class ContainerComposer(ContainerComponent):
    def initialize(self, container) -> None: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def get_state(self) -> Dict[str, Any]: ...
    def cleanup(self) -> None: ...
    
    # Composition methods from container.py
    def add_child_container(self, child) -> None: ...
    def remove_child_container(self, child_id: str) -> None: ...
    def get_child_containers(self) -> List: ...
    def set_parent_container(self, parent) -> None: ...
```

#### 1.4 ContainerConfigManager
Extract configuration management:
```python
# File: src/core/containers/components/configuration.py
@dataclass
class ContainerConfigManager(ContainerComponent):
    def initialize(self, container) -> None: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def get_state(self) -> Dict[str, Any]: ...
    def cleanup(self) -> None: ...
    
    # Config methods from container.py
    def update_config(self, config: Dict[str, Any]) -> None: ...
    def get_config_value(self, key: str, default=None) -> Any: ...
    def validate_config(self) -> bool: ...
```

#### 1.5 ContainerNamingService
Extract naming strategy:
```python
# File: src/core/containers/components/naming.py
@dataclass
class ContainerNamingService(ContainerComponent):
    def initialize(self, container) -> None: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def get_state(self) -> Dict[str, Any]: ...
    def cleanup(self) -> None: ...
    
    # Naming methods from container.py
    def generate_container_id(self, **kwargs) -> str: ...
    def parse_container_id(self, container_id: str) -> Dict: ...
    def get_container_family(self, container_id: str) -> str: ...
```

### Phase 2: Enhance engine.py with Composable Features

#### 2.1 Enhanced ContainerEngine
```python
# File: src/core/containers/engine.py (enhanced)
class ContainerEngine:
    def __init__(self, config: ContainerConfig):
        # Core composition (already exists)
        self._state_manager = StateManager(...)
        self._components = OrderedDict()
        self.event_bus = EventBus(...)
        
        # Add optional composable features based on config
        if config.enable_metrics:
            self.add_component('metrics_tracker', ContainerMetricsTracker(config.metrics_config))
            
        if config.enable_tracing:
            self.add_component('event_tracer', ContainerEventTracer(config.tracing_config))
            
        if config.enable_composition:
            self.add_component('composer', ContainerComposer(config.composition_config))
            
        if config.advanced_naming:
            self.add_component('naming_service', ContainerNamingService(config.naming_config))
            
        if config.advanced_config:
            self.add_component('config_manager', ContainerConfigManager(config))
```

#### 2.2 Feature Access Through Composition
```python
class ContainerEngine:
    def get_metrics(self) -> Dict[str, Any]:
        """Get metrics if metrics tracker is enabled."""
        tracker = self.get_component('metrics_tracker')
        return tracker.get_state() if tracker else {}
    
    def trace_event(self, event: Event) -> None:
        """Trace event if tracer is enabled."""
        tracer = self.get_component('event_tracer')
        if tracer:
            tracer.trace_event(event)
    
    def add_child_container(self, child) -> None:
        """Add child container if composer is enabled."""
        composer = self.get_component('composer')
        if composer:
            composer.add_child_container(child)
        else:
            raise RuntimeError("Container composition not enabled")
```

### Phase 3: Configuration-Driven Features

#### 3.1 Enhanced ContainerConfig
```python
@dataclass
class ContainerConfig:
    # Basic config (already exists)
    role: ContainerRole
    name: str
    container_id: Optional[str] = None
    
    # Feature toggles
    enable_metrics: bool = False
    enable_tracing: bool = False
    enable_composition: bool = False
    advanced_naming: bool = False
    advanced_config: bool = False
    
    # Feature-specific configs
    metrics_config: Optional[Dict[str, Any]] = None
    tracing_config: Optional[Dict[str, Any]] = None
    composition_config: Optional[Dict[str, Any]] = None
    naming_config: Optional[Dict[str, Any]] = None
```

#### 3.2 Backward Compatibility Layer
```python
# File: src/core/containers/compat.py
class LegacyContainer:
    """Compatibility wrapper for container.py users."""
    
    def __init__(self, config):
        # Create engine with all features enabled
        enhanced_config = ContainerConfig(
            role=config.role,
            name=config.name,
            enable_metrics=True,
            enable_tracing=True,
            enable_composition=True,
            advanced_naming=True,
            advanced_config=True
        )
        self._engine = ContainerEngine(enhanced_config)
    
    def __getattr__(self, name):
        # Delegate to engine or composed components
        return getattr(self._engine, name)
```

### Phase 4: Module Reorganization

#### 4.1 New Directory Structure
```
src/core/containers/
├── __init__.py              # Clean exports
├── engine.py                # Enhanced ContainerEngine (primary)
├── container.py             # Legacy container (marked deprecated)
├── protocols.py             # Container protocols
├── types.py                 # Type definitions
├── factory.py               # Container factory
├── exceptions.py            # Container exceptions
├── compat.py                # Backward compatibility
└── components/
    ├── __init__.py          # Component exports
    ├── lifecycle.py         # StateManager (already exists)
    ├── metrics.py           # ContainerMetricsTracker
    ├── tracing.py           # ContainerEventTracer
    ├── composition.py       # ContainerComposer
    ├── configuration.py     # ContainerConfigManager
    ├── naming.py            # ContainerNamingService
    ├── signal_generator.py  # (existing)
    └── signal_streamer.py   # (existing)
```

#### 4.2 Clean Module Interface
```python
# File: src/core/containers/__init__.py
from .engine import ContainerEngine as Container  # Primary implementation
from .engine import ContainerConfig
from .protocols import ContainerProtocol, ContainerRole, ContainerState
from .types import ContainerComponent, ContainerConfigDict
from .factory import ContainerFactory
from .exceptions import ContainerError, ComponentNotFoundError

# Backward compatibility
from .compat import LegacyContainer

__all__ = [
    # Primary interface
    'Container',
    'ContainerConfig', 
    'ContainerRole',
    'ContainerState',
    'ContainerProtocol',
    'ContainerComponent',
    'ContainerFactory',
    'ContainerError',
    'ComponentNotFoundError',
    
    # Compatibility
    'LegacyContainer'
]
```

## Implementation Phases

### Phase 1: Extract Components (High Priority)
1. ✅ Resolve ContainerComponent duplication
2. Extract ContainerMetricsTracker from container.py
3. Extract ContainerEventTracer from container.py  
4. Extract ContainerComposer from container.py
5. Test each component in isolation

### Phase 2: Enhance Engine (Medium Priority)
1. Add component composition to engine.py
2. Add configuration-driven feature loading
3. Add feature access methods
4. Test enhanced engine with extracted components

### Phase 3: Backward Compatibility (Medium Priority)
1. Create compatibility wrapper
2. Test existing code works with wrapper
3. Update documentation

### Phase 4: Migration (Lower Priority)
1. Update factory to use enhanced engine
2. Update imports throughout codebase
3. Mark container.py as deprecated
4. Create migration guide

## Benefits

1. **Clean Architecture**: Pure Protocol + Composition design
2. **Feature Parity**: All container.py features available through composition
3. **Maintainability**: Each component has single responsibility  
4. **Testability**: Components can be tested in isolation
5. **Configurability**: Features enabled based on use case
6. **Extensibility**: New features added as composable components
7. **Backward Compatibility**: Existing code continues to work

## Success Metrics

- [ ] All container.py features available in engine.py through composition
- [ ] Individual components have <100 lines each
- [ ] ContainerEngine remains <500 lines 
- [ ] All tests pass with enhanced engine
- [ ] Backward compatibility maintained
- [ ] Performance comparable or better than container.py