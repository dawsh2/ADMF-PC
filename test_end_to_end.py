#!/usr/bin/env python3
"""Test end-to-end feature generation and strategy execution."""

import sys
sys.path.insert(0, '/Users/daws/ADMF-PC')

from src.strategy.components.features.hub import FeatureHub
from src.strategy.strategies.indicators.crossovers import stochastic_crossover
import numpy as np

print("Testing end-to-end: Topology -> FeatureHub -> Strategy")
print("=" * 60)

# 1. Create FeatureHub with the configuration that topology would generate
feature_configs = {
    'stochastic_5_3': {
        'type': 'stochastic',
        'k_period': 5,
        'd_period': 3
    }
}

hub = FeatureHub(symbols=['SPY'])
hub.configure_features(feature_configs)

# 2. Add some test data
n_bars = 50
np.random.seed(42)
for i in range(n_bars):
    bar = {
        'open': 100 + np.random.uniform(-1, 1),
        'high': 101 + np.random.uniform(-1, 1),
        'low': 99 + np.random.uniform(-1, 1),
        'close': 100 + np.random.uniform(-1, 1),
        'volume': 1000000
    }
    hub.update_bar('SPY', bar)

# 3. Check what features FeatureHub generates
features = hub.get_features('SPY')
print("Features generated by FeatureHub:")
for name, value in sorted(features.items()):
    print(f"  {name}: {value}")

# 4. Test if strategy can access the features it expects
print(f"\nTesting strategy access:")
expected_k = 'stochastic_5_3_k'
expected_d = 'stochastic_5_3_d'

print(f"Strategy expects: {expected_k}, {expected_d}")
print(f"Available: {expected_k in features}, {expected_d in features}")

if expected_k in features and expected_d in features:
    print("✅ SUCCESS: Strategy can access expected features!")
    
    # 5. Test strategy execution
    params = {'k_period': 5, 'd_period': 3}
    bar = {
        'symbol': 'SPY',
        'timeframe': '1m',
        'timestamp': '2023-01-01',
        'close': 100
    }
    
    result = stochastic_crossover(features, bar, params)
    if result:
        print(f"Strategy result: {result}")
        print(f"Signal value: {result.get('signal_value')}")
    else:
        print("Strategy returned None (features not ready yet)")
        
else:
    print("❌ FAILURE: Strategy cannot access expected features")
    print("Available features:", list(features.keys()))