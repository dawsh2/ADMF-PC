#!/usr/bin/env python3
"""Trace the complete flow of features from inference to creation."""

import logging
import yaml
from src.core.coordinator.topology import TopologyBuilder
from src.core.coordinator.config.pattern_loader import PatternLoader
from src.core.containers.factory import ContainerFactory

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# Load config
with open('config/expansive_grid_search.yaml', 'r') as f:
    config = yaml.safe_load(f)

# Use only a few strategies for debugging
config['strategies'] = config['strategies'][:3]  # Just first 3 strategy types
config['classifiers'] = config['classifiers'][:3]  # Just first 3 classifier types
config['max_bars'] = 5  # Very short test

print("=== TRACING FEATURE FLOW ===\n")
print(f"Testing with {len(config['strategies'])} strategy types and {len(config['classifiers'])} classifier types")

# Step 1: Create topology builder and check inference
pattern_loader = PatternLoader()
topology_builder = TopologyBuilder(pattern_loader)

# Access the _infer_and_inject_features method directly
from src.core.coordinator.topology import TopologyBuilder
context = {
    'config': config,
    'pattern': {},
    'tracing': {},
    'metadata': {},
    'generated': {},
    'root_event_bus': None,
    'use_hierarchical_events': True,
    'original_strategies': [],
    'original_classifiers': []
}

print("Step 1: Feature Inference")
print("-" * 30)

# Store original to see expansion
original_strategies = config['strategies'].copy()
original_classifiers = config['classifiers'].copy()

# Expand parameters
if 'strategies' in config:
    config['strategies'] = topology_builder._expand_strategy_parameters(config['strategies'])
if 'classifiers' in config:
    config['classifiers'] = topology_builder._expand_classifier_parameters(config['classifiers'])

context['config'] = config

print(f"Strategies expanded: {len(original_strategies)} -> {len(config['strategies'])}")
print(f"Classifiers expanded: {len(original_classifiers)} -> {len(config['classifiers'])}")

# Run feature inference
topology_builder._infer_and_inject_features(context)

inferred_features = context.get('inferred_features', [])
feature_configs = context.get('config', {}).get('feature_configs', {})

print(f"Inferred features: {len(inferred_features)}")
print(f"Feature configs generated: {len(feature_configs)}")

print("\nFirst 10 inferred features:")
for i, feat in enumerate(inferred_features[:10]):
    print(f"  {i+1}. {feat}")

print("\nFirst 10 feature configs:")
for i, (name, config) in enumerate(list(feature_configs.items())[:10]):
    print(f"  {i+1}. {name}: {config}")

print("\nStep 2: Container Creation")
print("-" * 30)

# Continue with topology building
topology_builder.container_factory = ContainerFactory()

topology_definition = {
    'mode': 'signal_generation',
    'config': config,
    'tracing_config': {},
    'metadata': {}
}

# Build full topology
topology = topology_builder.build_topology(topology_definition)

print(f"Topology built with {len(topology['containers'])} containers")

# Find feature hub container
feature_hub_container = None
for name, container in topology['containers'].items():
    if 'strategy' in name:  # Feature hub is in strategy container in signal_generation mode
        fh_component = container.get_component('feature_hub')
        if fh_component:
            feature_hub_container = container
            break

if feature_hub_container:
    print(f"Found feature hub in container: {feature_hub_container.name}")
    fh_component = feature_hub_container.get_component('feature_hub')
    fh = fh_component._feature_hub
    
    print(f"FeatureHub configured with {len(fh._feature_configs)} features")
    
    print("\nFirst 10 FeatureHub configs:")
    for i, (name, config) in enumerate(list(fh._feature_configs.items())[:10]):
        print(f"  {i+1}. {name}: {config}")
    
    # Check if we lost any features
    lost_features = set(feature_configs.keys()) - set(fh._feature_configs.keys())
    gained_features = set(fh._feature_configs.keys()) - set(feature_configs.keys())
    
    print(f"\nFeature comparison:")
    print(f"  Generated by topology: {len(feature_configs)}")
    print(f"  Configured in FeatureHub: {len(fh._feature_configs)}")
    print(f"  Lost features: {len(lost_features)}")
    print(f"  Gained features: {len(gained_features)}")
    
    if lost_features:
        print(f"\nFirst 5 lost features:")
        for feat in list(lost_features)[:5]:
            print(f"  - {feat}: {feature_configs.get(feat)}")
    
    if gained_features:
        print(f"\nFirst 5 gained features:")
        for feat in list(gained_features)[:5]:
            print(f"  + {feat}: {fh._feature_configs.get(feat)}")
            
    print("\nStep 3: Feature Creation Test")
    print("-" * 30)
    
    # Test feature creation
    test_features = list(fh._feature_configs.keys())[:5]
    print(f"Testing creation of first 5 features: {test_features}")
    
    for feat_name in test_features:
        feat_config = fh._feature_configs[feat_name]
        try:
            feature = fh._create_feature(feat_name, feat_config)
            print(f"  ✓ {feat_name} -> {type(feature).__name__}")
        except Exception as e:
            print(f"  ✗ {feat_name} -> ERROR: {e}")
            print(f"    Config: {feat_config}")
            
else:
    print("ERROR: No feature hub container found!")

print("\nStep 4: Bar Update Test")
print("-" * 30)

if feature_hub_container:
    fh_component = feature_hub_container.get_component('feature_hub')
    fh = fh_component._feature_hub
    
    # Test updating with a few bars
    bar_data = {
        'open': 100.0,
        'high': 101.0,
        'low': 99.0,
        'close': 100.5,
        'volume': 1000000
    }
    
    print(f"Updating FeatureHub with test bar...")
    
    try:
        fh.update_bar('SPY', bar_data)
        features = fh.get_features('SPY')
        print(f"Successfully computed {len(features)} features after 1 bar")
        
        # Show first few computed features
        for i, (name, value) in enumerate(list(features.items())[:5]):
            print(f"  {i+1}. {name}: {value}")
            
        if len(features) == 0:
            print("  WARNING: No features returned values after 1 bar (may need warmup)")
            
    except Exception as e:
        print(f"ERROR during bar update: {e}")
        import traceback
        traceback.print_exc()

print("\n=== SUMMARY ===")
print(f"Features inferred: {len(inferred_features)}")
print(f"Features configured: {len(fh._feature_configs) if feature_hub_container else 0}")
print(f"Features computed: {len(features) if feature_hub_container and 'features' in locals() else 0}")