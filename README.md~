
# System Primitives
The system is composed from two fundemental components: events and containers. Events are the data type [...]. Events need a _bus_ to communicate [...]. Containers ensure _isolation_ of state to the components contained within it during it's lifecycle. Containers are repsonsible for synchronizing data processing to prevent race conditions, duplicate orders, improper access of state using _barriers_ [...]. 



- docs/workflows.md
- strategies have pre-state filters, risk, when needed, is a post state meta-filter (e.g, strategy is losing too much, switch)
- different events can be created for different paradigms, i.e RL training 
- system is basically a configurable container and event system with trading specific logic built around it
- topology effects thinking process, strategy generating signals before portfolio 





main.py - take cli's to point to config, pass any additional args (e.g, --bars 100, --validate, --dataset test)
src/core:
      - events system - not basic, but the heart of the system.
	  - containers - 
