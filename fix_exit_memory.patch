--- a/src/portfolio/state.py
+++ b/src/portfolio/state.py
@@ -293,7 +293,8 @@ class PortfolioState(PortfolioStateProtocol):
         symbol: str,
         quantity_delta: Decimal,
         price: Decimal,
-        timestamp: datetime
+        timestamp: datetime,
+        metadata: Optional[Dict[str, Any]] = None
     ) -> Position:
         """Update position with a trade.
         
@@ -302,6 +303,7 @@ class PortfolioState(PortfolioStateProtocol):
             quantity_delta: Change in quantity (+ for buy, - for sell)
             price: Execution price
             timestamp: Trade timestamp
+            metadata: Optional metadata to merge into position metadata
             
         Returns:
             Updated position
@@ -328,9 +330,14 @@ class PortfolioState(PortfolioStateProtocol):
                 metadata={
                     'bars_held': 0,
                     'highest_price': str(price),  # For trailing stop (stored as string)
-                    'strategy_id': None  # Will be set from order metadata
                 }
             )
+            
+            # Merge any provided metadata
+            if metadata:
+                position.metadata.update(metadata)
+                logger.info(f"  üìù Merged metadata: {metadata}")
+            
             self._positions[symbol] = position
             logger.info(f"  üìç Position created and stored: {position}")
             
@@ -743,8 +750,13 @@ class PortfolioState(PortfolioStateProtocol):
                 existing_position.metadata['exit_reason'] = exit_reason
                 logger.info(f"  üè∑Ô∏è Exit metadata: type={exit_type}, reason={exit_reason}")
         
+        # Prepare metadata to pass to update_position
+        position_metadata = {}
+        if strategy_id:
+            position_metadata['strategy_id'] = strategy_id
+        
         # Update position - this will emit POSITION_OPEN/CLOSE events
-        position = self.update_position(symbol, quantity, fill.price, fill.executed_at)
+        position = self.update_position(symbol, quantity, fill.price, fill.executed_at, metadata=position_metadata)
         logger.info(f"  üìä Position updated: {position}")
         
         # Store strategy_id in position metadata if it's a new position