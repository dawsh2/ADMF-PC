#!/usr/bin/env python3
"""
Pre-commit hook to ensure all strategies have corresponding tests.
"""

import subprocess
import sys
import re
from pathlib import Path

def get_changed_files():
    """Get list of changed Python files in the commit."""
    result = subprocess.run(
        ['git', 'diff', '--cached', '--name-only', '--diff-filter=ACM'],
        capture_output=True,
        text=True
    )
    return [f for f in result.stdout.strip().split('\n') if f.endswith('.py')]

def find_strategies_in_file(file_path):
    """Find all strategy functions in a Python file."""
    strategies = []
    
    try:
        with open(file_path, 'r') as f:
            content = f.read()
            
        # Find @strategy decorators and the following function
        pattern = r'@strategy\s*\([^)]*\)\s*\n\s*def\s+(\w+)'
        matches = re.findall(pattern, content, re.MULTILINE)
        strategies.extend(matches)
        
    except Exception as e:
        print(f"Error reading {file_path}: {e}")
    
    return strategies

def find_test_file_for_module(module_path):
    """Find the corresponding test file for a strategy module."""
    # Convert strategy path to test path
    if 'src/strategy/strategies/indicators/' in module_path:
        module_name = Path(module_path).stem
        test_path = f'tests/unit/strategy/indicators/test_{module_name}.py'
        return test_path
    elif 'src/strategy/strategies/' in module_path:
        module_name = Path(module_path).stem
        test_path = f'tests/unit/strategy/test_{module_name}.py'
        return test_path
    
    return None

def check_test_exists_for_strategy(strategy_name, test_file_path):
    """Check if a test exists for a specific strategy."""
    if not Path(test_file_path).exists():
        return False
    
    try:
        with open(test_file_path, 'r') as f:
            content = f.read()
            
        # Look for test method for this strategy
        test_pattern = f'def test_{strategy_name}'
        if test_pattern in content:
            return True
            
        # Also check for references to the strategy function
        if strategy_name in content:
            return True
            
    except Exception as e:
        print(f"Error reading {test_file_path}: {e}")
    
    return False

def main():
    """Main pre-commit hook logic."""
    changed_files = get_changed_files()
    
    if not changed_files:
        sys.exit(0)
    
    missing_tests = []
    
    for file_path in changed_files:
        # Only check strategy files
        if 'src/strategy/strategies/' not in file_path:
            continue
            
        strategies = find_strategies_in_file(file_path)
        
        if not strategies:
            continue
            
        test_file = find_test_file_for_module(file_path)
        
        if not test_file:
            print(f"Warning: Cannot determine test file for {file_path}")
            continue
        
        for strategy in strategies:
            if not check_test_exists_for_strategy(strategy, test_file):
                missing_tests.append({
                    'strategy': strategy,
                    'module': file_path,
                    'test_file': test_file
                })
    
    if missing_tests:
        print("\n" + "="*80)
        print("COMMIT BLOCKED: Missing tests for strategies")
        print("="*80)
        print("\nThe following strategies do not have corresponding tests:\n")
        
        for item in missing_tests:
            print(f"  Strategy: {item['strategy']}")
            print(f"    Module: {item['module']}")
            print(f"    Expected test file: {item['test_file']}")
            print()
        
        print("To fix this:")
        print("1. Run: python generate_indicator_tests.py")
        print("2. Customize the generated tests for your strategies")
        print("3. Ensure each strategy has a test_{strategy_name} method")
        print("4. Run: python run_indicator_tests.py")
        print("\nOr to skip this check (not recommended):")
        print("  git commit --no-verify")
        
        sys.exit(1)
    
    # Check if any test files were modified
    test_files = [f for f in changed_files if 'tests/' in f]
    if test_files:
        print("Running modified tests...")
        
        for test_file in test_files:
            result = subprocess.run(
                [sys.executable, '-m', 'pytest', test_file, '-v'],
                capture_output=True,
                text=True
            )
            
            if result.returncode != 0:
                print(f"\nTests failed in {test_file}")
                print(result.stdout)
                print(result.stderr)
                print("\nFix the failing tests before committing.")
                sys.exit(1)
    
    print("âœ“ All strategy tests verified")
    sys.exit(0)

if __name__ == '__main__':
    main()